{
  "version": 3,
  "sources": ["../../../app/components/user/register.tsx", "../../../app/routes/register.tsx"],
  "sourcesContent": ["import { Form, Link, useNavigate } from \"@remix-run/react\";\r\nimport { CusButton } from \"../utils/buttont\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEye, faEyeSlash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\r\nimport { auth } from \"~/services/firebase\";\r\nimport { BaseUrl } from \"~/const\";\r\nimport axios from \"axios\";\r\n\r\ntype RegisterBoxState = {\r\n    message: string | null | undefined,\r\n    isBrand: boolean,\r\n}\r\nexport const RegisterBox = (props: RegisterBoxState) => {\r\n    const navigator = useNavigate();\r\n    const [isBrand, setBrand] = useState(false);\r\n    const cat = useRef<HTMLInputElement | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (props.isBrand) {\r\n            cat.current!.value = \"brand\";\r\n            setBrand(true);\r\n        } else {\r\n            cat.current!.value = \"inf\";\r\n            setBrand(false);\r\n        }\r\n    }, []);\r\n\r\n    const [error, setError] = useState<String | null>(null);\r\n\r\n\r\n    const [showpassone, setShowPassone] = useState<boolean>(false);\r\n    const changePassVisabelone = () => {\r\n        setShowPassone(!showpassone);\r\n    }\r\n\r\n    const [showpasstwo, setShowPasstwo] = useState<boolean>(false);\r\n    const changePassVisabeltwo = () => {\r\n        setShowPasstwo(!showpasstwo);\r\n    }\r\n\r\n\r\n    const socialRegister = async (email: string, pass: string) => {\r\n        let req = {\r\n            \"email\": email,\r\n            \"password\": pass,\r\n            \"confirm-password\": pass,\r\n            \"isBrand\": \"0\",\r\n            \"isInfluencer\": \"1\"\r\n        };\r\n        const apidata = await axios({\r\n            method: 'post',\r\n            url: `${BaseUrl}/api/register`,\r\n            data: req,\r\n            headers: {\r\n                'Access-Control-Allow-Origin': '*',\r\n                'Access-Control-Allow-Headers': '*',\r\n                'Access-Control-Allow-Options': '*',\r\n                'Access-Control-Allow-Methods': '*',\r\n                'X-Content-Type-Options': '*',\r\n                'Content-Type': 'application/json',\r\n                'Accept': '*'\r\n            }\r\n        });\r\n        if (apidata.data.status) {\r\n            navigator(`/extra/socialregister/${apidata.data.data.id}`);\r\n        } else {\r\n            setError(apidata.data.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"w-full px-6 sm:px-16 grid  lg:grid-cols-3  md:w-4/6 lg:w-full mx-auto mb-20\">\r\n                <div className=\"hidden flex-col lg:flex\">\r\n                    <div className=\"grow\"></div>\r\n                    <div className=\"flex\">\r\n                        <div className=\"grow\">\r\n                        </div>\r\n                        <img src=\"/images/avatar/login.png\" alt=\"err\" className=\"justify-self-end w-[250px] h-[400px]\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"bg-white rounded-xl shadow-xl py-6 px-10\">\r\n                    <div className=\"flex\">\r\n                        <div className=\"w-full\" onClick={() => {\r\n                            cat.current!.value = \"inf\";\r\n                            setBrand(false);\r\n                        }}>\r\n                            <CusButton width={\"w-full\"} text=\"Influencer\" background={`${isBrand ? \"\" : \"bg-secondary\"}`} textColor={`${isBrand ? \"text-primary\" : \"text-white\"}`} borderColor={`${isBrand ? \"border-primary\" : \"\"}`} fontwidth=\"font-bold\" ></CusButton>\r\n                        </div>\r\n                        <div className=\"w-10\"></div>\r\n                        <div className=\"w-full\" onClick={() => {\r\n                            cat.current!.value = \"brand\";\r\n                            setBrand(true);\r\n                        }}>\r\n                            <CusButton width={\"w-full\"} text=\"Brand\" textColor={`${isBrand ? \"text-white\" : \"text-primary\"}`} background={`${isBrand ? \"bg-secondary\" : \"\"}`} borderColor={`${isBrand ? \"\" : \"border-primary\"}`} fontwidth=\"font-bold\" ></CusButton>\r\n                        </div>\r\n                    </div>\r\n                    <Form method=\"post\">\r\n                        <input name=\"cat\" ref={cat} type=\"hidden\" />\r\n                        <p className=\"text-black text-left font-bold text-lg mt-4\">Join</p>\r\n                        <p className=\"text-black text-left font-normal text-lg\">Email</p>\r\n                        <input name=\"email\" type={\"text\"} className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\" placeholder=\"example@mail.com\" />\r\n                        <p className=\"text-black text-left font-normal text-lg mt-4\">Password</p>\r\n                        <div className=\"bg-gray-200 rounded-md px-4 py-2 flex\">\r\n                            <input name=\"password\" type={showpassone ? \"text\" : \"password\"} className=\"bg-transparent outline-none border-none focus:border-gray-300 rounded-md w-full\" placeholder=\"8 character\" />\r\n                            <div className=\"text-gray-600 text-center px-1 rounded-md shadow-lg text-md\" onClick={changePassVisabelone}>\r\n                                <FontAwesomeIcon icon={showpassone ? faEye : faEyeSlash}></FontAwesomeIcon>\r\n                            </div>\r\n                        </div>\r\n                        <p className=\"text-black text-left font-normal text-lg mt-4\">Confirm password</p>\r\n                        <div className=\"bg-gray-200 rounded-md px-4 py-2 flex\">\r\n                            <input name=\"repassword\" type={showpasstwo ? \"text\" : \"password\"} className=\"bg-transparent outline-none border-none focus:border-gray-300 rounded-md w-full\" placeholder=\"8 character\" />\r\n                            <div className=\"text-gray-600 text-center px-1 rounded-md shadow-lg text-md\" onClick={changePassVisabeltwo}>\r\n                                <FontAwesomeIcon icon={showpasstwo ? faEye : faEyeSlash}></FontAwesomeIcon>\r\n                            </div>\r\n                        </div>\r\n                        {!isBrand ?\r\n                            <>\r\n                                <div className=\"grid place-items-center py-4\">\r\n                                    <div className=\"flex content-center gap-4\">\r\n                                        <div className=\"grid place-items-center\">\r\n                                            <p className=\"text-black text-left font-normal text-lg  allign-center\">Login with</p>\r\n                                        </div>\r\n                                        <img src=\"/images/icons/apple.png\" alt=\"error\" className=\"w-10 h-10\" />\r\n                                        <div onClick={async () => {\r\n                                            const googleProvider = new GoogleAuthProvider();\r\n                                            const res = await signInWithPopup(auth, googleProvider);\r\n                                            const pass = res.user.displayName?.trim().split(\" \").join('').toLowerCase().trim() + \"SWRV123@#\";\r\n                                            try {\r\n                                                await socialRegister(res.user.email!, pass);\r\n\r\n                                            } catch (e: any) {\r\n                                                setError(e.toString());\r\n                                            }\r\n                                        }}>\r\n                                            <img src=\"/images/icons/google.png\" alt=\"error\" className=\"w-10 h-10\" />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                {(error == \"\" || error == null || error == undefined) ? null :\r\n                                    <div className=\"bg-red-500 bg-opacity-10 border-2 text-center border-red-500 rounded-md text-red-500 text-md font-normal text-md my-4\">{error}</div>\r\n                                }\r\n                                {props.message && <p className=\"w-full border-2 border-red-500 bg-red-500 bg-opacity-5  text-center my-2 rounded-md p-2 text-sm font-semibold text-red-500\">{props.message}</p>}\r\n                            </>\r\n                            : null}\r\n                        <div className=\"h-4\"></div>\r\n                        <button className=\"w-full inline black rounded-lg bg-primary shadow-lg text-center font-bold text-white text-md py-2 \">create account</button>\r\n                        <div className=\"flex gap-4 content-start mt-4\">\r\n                            <div>\r\n                                <input type={\"checkbox\"} name=\"check1\" />\r\n                            </div>\r\n                            <label className=\"text-left text-[10px] text-black font-normal\">I agree with Terms of use and acknowledge that my personal data is being collected and processed in accordance with Privacy policy</label>\r\n                        </div>\r\n                        <div className=\"flex gap-4 mt-4 items-start\">\r\n                            <div>\r\n                                <input type={\"checkbox\"} name=\"check2\" />\r\n                            </div>\r\n                            <p className=\"text-left text-[10px] text-black font-normal\">Also, I confirm I am of eligible age</p>\r\n                        </div>\r\n                        <p className=\"text-black text-left font-normal text-lg mt-8\">I\u2019m already registered.<Link to={\"/login\"}> <span className=\"font-bold\"> Let me Log in</span></Link></p>\r\n                    </Form>\r\n                </div>\r\n                <div className=\"hidden lg:block\"></div>\r\n            </div>\r\n        </>\r\n    );\r\n}", "import { ActionArgs, LoaderArgs, LoaderFunction, json, redirect } from \"@remix-run/node\";\r\nimport { useActionData, useLoaderData } from \"@remix-run/react\";\r\nimport axios from \"axios\";\r\nimport { IntroNavBar } from \"~/components/home/navbar/intronavbar\";\r\nimport { RegisterBox } from \"~/components/user/register\";\r\nimport { BaseUrl } from \"~/const\";\r\nimport { userPrefs } from \"~/cookies\";\r\n\r\nexport const loader: LoaderFunction = async ({ request }: LoaderArgs) => {\r\n\r\n\r\n    const isBrand = new URL(request.url).searchParams.get(\"isBrand\");\r\n    const isInf = new URL(request.url).searchParams.get(\"isInf\");\r\n    let brand = isBrand == \"1\" ? true : false;\r\n    let inf = isInf == \"1\" ? true : false;\r\n    const cookieHeader = request.headers.get(\"Cookie\");\r\n    const cookie = await userPrefs.parse(cookieHeader);\r\n    if (cookie) {\r\n        if (cookie.isLogin) {\r\n            return redirect(\"/home\");\r\n        }\r\n    }\r\n    return json({ brand: brand, inf: inf });\r\n}\r\n\r\nconst register = () => {\r\n    const loaderData = useLoaderData();\r\n\r\n    const data = useActionData();\r\n\r\n    return (\r\n        <>\r\n            <IntroNavBar></IntroNavBar>\r\n            <RegisterBox isBrand={loaderData.brand ? true : false} message={data?.message}></RegisterBox>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default register;\r\n\r\nexport const action = async ({ request }: ActionArgs) => {\r\n    const formData = await request.formData();\r\n    const value = Object.fromEntries(formData);\r\n\r\n    if (value.email == \"\" || value.email == null || value.email == undefined) {\r\n        return { message: \"Enter the email\" };\r\n    }\r\n    if (value.password == \"\" || value.password == null || value.password == undefined) {\r\n        return { message: \"Enter the password\" };\r\n    }\r\n    if (value.repassword == \"\" || value.repassword == null || value.repassword == undefined) {\r\n        return { message: \"Enter the repassword\" };\r\n    }\r\n    if (value.check1 != \"on\" || value.check2 != \"on\") {\r\n        return { message: \"Check the all checkbox\" };\r\n    }\r\n    if (value.password != value.repassword) {\r\n        return { message: \"Password and Re-password should be same\" };\r\n    }\r\n\r\n\r\n\r\n    let req: { [key: string]: string; } = {};\r\n\r\n    if (value.cat == \"inf\") {\r\n        req = {\r\n            \"email\": value.email.toString(),\r\n            \"password\": value.password.toString(),\r\n            \"confirm-password\": value.repassword.toString(),\r\n            \"isBrand\": \"0\",\r\n            \"isInfluencer\": \"1\"\r\n        };\r\n    }\r\n    if (value.cat == \"brand\") {\r\n        req = {\r\n            \"email\": value.email.toString(),\r\n            \"password\": value.password.toString(),\r\n            \"confirm-password\": value.repassword.toString(),\r\n            \"isBrand\": \"1\",\r\n            \"isInfluencer\": \"0\"\r\n        };\r\n    }\r\n    try {\r\n        //registring the user\r\n        const apidata = await axios({\r\n            method: 'post',\r\n            url: `${BaseUrl}/api/register`,\r\n            data: req,\r\n            headers: {\r\n                'Access-Control-Allow-Origin': '*',\r\n                'Access-Control-Allow-Headers': '*',\r\n                'Access-Control-Allow-Options': '*',\r\n                'Access-Control-Allow-Methods': '*',\r\n                'X-Content-Type-Options': '*',\r\n                'Content-Type': 'application/json',\r\n                'Accept': '*'\r\n            }\r\n        });\r\n\r\n        if (apidata.data.status == false) {\r\n            return { message: apidata.data.message };\r\n        } else {\r\n\r\n\r\n            //getting data and storing in cookies\r\n\r\n            const userdata = await axios({\r\n                method: 'post',\r\n                url: `${BaseUrl}/api/getuser`,\r\n                data: { \"id\": apidata.data.data.id },\r\n                headers: {\r\n                    'Access-Control-Allow-Origin': '*',\r\n                    'Access-Control-Allow-Headers': '*',\r\n                    'Access-Control-Allow-Options': '*',\r\n                    'Access-Control-Allow-Methods': '*',\r\n                    'X-Content-Type-Options': '*',\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': '*'\r\n                }\r\n            });\r\n\r\n            const sendverificationmail = await axios({\r\n                method: 'post',\r\n                url: `${BaseUrl}/api/send-otp`,\r\n                data: { \"userId\": apidata.data.data.id },\r\n                headers: {\r\n                    'Access-Control-Allow-Origin': '*',\r\n                    'Access-Control-Allow-Headers': '*',\r\n                    'Access-Control-Allow-Options': '*',\r\n                    'Access-Control-Allow-Methods': '*',\r\n                    'X-Content-Type-Options': '*',\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': '*'\r\n                }\r\n            });\r\n\r\n\r\n            if (userdata.data.status == false) {\r\n                return { message: userdata.data.message };\r\n            } else if (sendverificationmail.data.status == false) {\r\n                return { message: sendverificationmail.data.message };\r\n            } else {\r\n                if (value.cat == \"inf\") {\r\n                    return redirect(\"/home\", {\r\n                        headers: {\r\n                            \"Set-Cookie\": await userPrefs.serialize({ user: userdata.data.data[0], isLogin: true }),\r\n                        },\r\n                    });\r\n                } else {\r\n                    return redirect(\"/createbrand\", {\r\n                        headers: {\r\n                            \"Set-Cookie\": await userPrefs.serialize({ user: userdata.data.data[0], isLogin: true }),\r\n                        },\r\n                    });\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    } catch (e) {\r\n        return { message: e };\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_dev_runtime"]
}
