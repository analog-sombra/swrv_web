{
  "version": 3,
  "sources": ["../../../../../app/routes/home/profilecomplete/thirdpage.tsx"],
  "sourcesContent": ["import { ActionArgs, ActionFunction, LoaderArgs, LoaderFunction, json, redirect } from \"@remix-run/node\";\r\nimport { Form, Link, useLoaderData, useNavigate } from \"@remix-run/react\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { CusButton } from \"~/components/utils/buttont\";\r\nimport { BaseUrl, instaUrl } from \"~/const\";\r\nimport { userPrefs } from \"~/cookies\";\r\nimport UserInputStore from \"~/state/user/firstinput\";\r\n\r\nexport const loader: LoaderFunction = async (props: LoaderArgs) => {\r\n\r\n    const cookieHeader = props.request.headers.get(\"Cookie\");\r\n    const cookie = await userPrefs.parse(cookieHeader);\r\n    const paltform = await axios({\r\n        method: 'post',\r\n        url: `${BaseUrl}/api/getplatform`,\r\n        headers: {\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Access-Control-Allow-Headers': '*',\r\n            'Access-Control-Allow-Options': '*',\r\n            'Access-Control-Allow-Methods': '*',\r\n            'X-Content-Type-Options': '*',\r\n            'Content-Type': 'application/json',\r\n            'Accept': '*'\r\n        }\r\n    });\r\n\r\n    return json({ user: cookie.user, paltform: paltform.data.data });\r\n}\r\n\r\n\r\n\r\nconst ThirdPage = () => {\r\n    const userdata = useLoaderData();\r\n    const userId: string = userdata.user.id\r\n    const platform = userdata.paltform;\r\n\r\n    const [selPlatform, setSelPlatfome] = useState<any[]>([]);\r\n    const [addedPlatfrom, setAddPlatform] = useState<any[]>([]);\r\n    const [error, setError] = useState<String | null>(null);\r\n    const [sus, setSus] = useState<String | null>(null);\r\n\r\n    const setIndex = UserInputStore((state) => state.setIndex);\r\n    // const navigator = useNavigate();\r\n\r\n    const nextButton = useRef<HTMLButtonElement>(null);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"p-8 w-full\">\r\n                <h1 className=\"text-2xl text-black font-bold\">Channels</h1>\r\n                <div className=\"flex content-center items-center gap-2 flex-col md:flex-row mt-2\">\r\n                    <div className=\"md:flex gap-2 mt-2 grid place-items-center grid-cols-4\">\r\n                        {platform.map((val: any, i: number) => {\r\n                            return (\r\n                                <div key={i} className={`w-12 h-12 p-2 rounded-lg ${selPlatform.includes(val) ? \"bg-white shadow-xl \" : \"bg-gray-200\"} `} onClick={() => {\r\n                                    setSelPlatfome([val]);\r\n                                }}>\r\n                                    <img src={platform[i][\"platformLogoUrl\"]} alt=\"error\" className=\"w-10\" />\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                    <div className=\"grow hidden md:block\"></div>\r\n                    <div onClick={() => {\r\n                        setAddPlatform([...addedPlatfrom, { val: selPlatform[0], status: false, text: \"\" }]);\r\n                        setSelPlatfome([]);\r\n                    }}>\r\n                        <CusButton text=\"Add new Channel\" textColor={\"text-white\"} width={'w-36'} background={\"bg-primary\"} fontwidth={\"font-normal\"} textSize={\"text-md\"}></CusButton>\r\n                    </div>\r\n                </div>\r\n                <div className=\"flex w-full\">\r\n                    <div className=\"w-full\">\r\n                        <div>\r\n                            {\r\n                                addedPlatfrom.map((val: any, index: number) => {\r\n                                    return (\r\n                                        <div key={index} className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2 mt-2 flex \">\r\n                                            <div><img src={`${val[\"val\"][\"platformLogoUrl\"]}`} alt=\"logo\" className=\"w-10\" /></div>\r\n                                            <input disabled={val[\"status\"]} type={\"text\"} value={val[\"text\"]} onChange={(e) => {\r\n                                                let adddata = addedPlatfrom.filter((data) => data != val);\r\n                                                setAddPlatform([...adddata, { val: val[\"val\"], status: false, text: e.target.value }])\r\n                                            }} className=\"mx-3 bg-transparent  outline-none border-none focus:border-gray-300 rounded-md w-full\" />\r\n                                            {\r\n                                                val[\"status\"] ? null : <div className=\"text-white bg-green-500 font-medium text-md text-center rounded-md grid place-items-center px-4 cursor-pointer\" onClick={async () => {\r\n                                                    if (val[\"text\"] == null || val[\"text\"] == undefined || val[\"text\"] == \"\") {\r\n                                                        setSus(null);\r\n                                                        setError(\"Fill the handle name\");\r\n                                                    }\r\n                                                    else if (val[\"text\"].indexOf(\" \") >= 0) {\r\n                                                        setSus(null);\r\n                                                        setError(\"Hashtag cannot containt space\");\r\n                                                    }\r\n                                                    else {\r\n\r\n                                                        // await getuserData(val[\"text\"]);\r\n                                                        // setInsta(true);\r\n                                                        // setval(val);\r\n\r\n\r\n                                                        let req = {\r\n                                                            \"userId\": userId,\r\n                                                            \"platformId\": val[\"val\"][\"id\"],\r\n                                                            \"handleName\": val[\"text\"]\r\n                                                        };\r\n\r\n                                                        const data = await axios({\r\n                                                            method: 'post',\r\n                                                            url: `${BaseUrl}/api/add-handle`,\r\n                                                            data: req,\r\n                                                            headers: {\r\n                                                                'Access-Control-Allow-Origin': '*',\r\n                                                                'Access-Control-Allow-Headers': '*',\r\n                                                                'Access-Control-Allow-Options': '*',\r\n                                                                'Access-Control-Allow-Methods': '*',\r\n                                                                'X-Content-Type-Options': '*',\r\n                                                                'Content-Type': 'application/json',\r\n                                                                'Accept': '*'\r\n                                                            }\r\n                                                        });\r\n                                                        if (data.data.status == false) {\r\n                                                            setSus(null);\r\n                                                            return setError(data.data.message);\r\n                                                        }\r\n                                                        else {\r\n                                                            setError(null);\r\n                                                            setSus(\"Successfully added the user handel\");\r\n                                                            let adddata = addedPlatfrom.filter((data) => data != val);\r\n                                                            setAddPlatform([...adddata, { val: val[\"val\"], status: true, text: val[\"text\"] }]);\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                }>Done</div>\r\n                                            }\r\n                                        </div>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </div>\r\n                        {(error == \"\" || error == null || error == undefined) ? null :\r\n                            <div className=\"bg-red-500 bg-opacity-10 border-2 text-center border-red-500 rounded-md text-red-500 text-md font-normal text-md my-4\">{error}</div>\r\n                        }\r\n                        {(sus == \"\" || sus == null || sus == undefined) ? null :\r\n                            <div className=\"bg-green-500 bg-opacity-10 border-2 text-center border-green-500 rounded-md text-green-500 text-md font-normal text-md my-4\">{sus}</div>\r\n                        }\r\n                        <div onClick={() => {\r\n                            if (addedPlatfrom.length == 0) {\r\n                                setSus(null);\r\n                                setError(\"Add at least one handel\");\r\n                            }\r\n                            else {\r\n                                if (addedPlatfrom[0][\"status\"]) {\r\n                                    setIndex(4);\r\n                                    nextButton.current!.click();\r\n                                } else {\r\n                                    setSus(null);\r\n                                    setError(\"Add at least one handel\");\r\n                                }\r\n                            }\r\n                        }}>\r\n                            <CusButton text=\"Next\" textColor={\"text-white\"} width={'w-full'} background={\"bg-primary\"} fontwidth={\"font-bold\"}></CusButton>\r\n                        </div>\r\n                        <Form method=\"post\" className=\"hidden\">\r\n                            <input type=\"hidden\" name=\"id\" value={userId.toString()} />\r\n                            <button ref={nextButton} name=\"submit\">Submit</button>\r\n                        </Form>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default ThirdPage;\r\n\r\n\r\n\r\n\r\nexport const action: ActionFunction = async ({ request }: ActionArgs) => {\r\n    const formData = await request.formData();\r\n    const value = Object.fromEntries(formData);\r\n\r\n    const userdata = await axios({\r\n        method: 'post',\r\n        url: `${BaseUrl}/api/getuser`,\r\n        data: { \"id\": value.id },\r\n        headers: {\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Access-Control-Allow-Headers': '*',\r\n            'Access-Control-Allow-Options': '*',\r\n            'Access-Control-Allow-Methods': '*',\r\n            'X-Content-Type-Options': '*',\r\n            'Content-Type': 'application/json',\r\n            'Accept': '*'\r\n        }\r\n    });\r\n    if (userdata.data.status == false) {\r\n        return { message: userdata.data.message };\r\n    } else {\r\n        return redirect(\"/home/profilecomplete/forthpage\", {\r\n            headers: {\r\n                \"Set-Cookie\": await userPrefs.serialize({ user: userdata.data.data[0], isLogin: true }),\r\n            },\r\n        });\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["import_react", "data"]
}
