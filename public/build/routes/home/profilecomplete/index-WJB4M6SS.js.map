{
  "version": 3,
  "sources": ["../../../../../app/routes/home/profilecomplete/index.tsx"],
  "sourcesContent": ["import { ActionArgs, ActionFunction, LoaderArgs, LoaderFunction, json, redirect } from \"@remix-run/node\";\r\nimport { Form, useLoaderData, useNavigate } from \"@remix-run/react\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { CusButton } from \"~/components/utils/buttont\";\r\nimport { BaseUrl } from \"~/const\";\r\nimport { userPrefs } from \"~/cookies\";\r\nimport UserInputStore from \"~/state/user/firstinput\";\r\nimport { UploadFile } from \"~/utils\";\r\nimport axios from \"axios\";\r\n\r\nexport const loader: LoaderFunction = async (props: LoaderArgs) => {\r\n    const cookieHeader = props.request.headers.get(\"Cookie\");\r\n    const cookie = await userPrefs.parse(cookieHeader);\r\n    return json({ user: cookie.user });\r\n}\r\n\r\nconst UserInputBoxOne = () => {\r\n\r\n    const user = useLoaderData();\r\n    const useremail: string = user.user.email;\r\n    const userID: String = user.user.id;\r\n    const setIndex = UserInputStore((state) => state.setIndex);\r\n    const navigator = useNavigate();\r\n\r\n    const [img, setImg] = useState<File | null>(null);\r\n    let imgref = useRef<HTMLInputElement | null>(null);\r\n    const [imgerror, setImgerror] = useState<string | null>(null);\r\n    const [error, setError] = useState<String | null>(null);\r\n\r\n\r\n    const emailRef = useRef<HTMLInputElement | null>(null);\r\n    const usernameRef = useRef<HTMLInputElement | null>(null);\r\n    const nicknameRef = useRef<HTMLInputElement | null>(null);\r\n    const datepicker = useRef<HTMLInputElement | null>(null);\r\n    const bioRef = useRef<HTMLTextAreaElement | null>(null);\r\n\r\n    useEffect(() => {\r\n        emailRef!.current!.value = useremail;\r\n        usernameRef!.current!.value = useremail;\r\n    }, []);\r\n\r\n    const nextButton = useRef<HTMLButtonElement>(null);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"p-8 w-full\">\r\n                <h1 className=\"text-2xl text-black font-bold\">Tell us about yourself</h1>\r\n                <div className=\"flex w-full md:flex-row flex-col\">\r\n                    <div>\r\n                        <div className=\"hidden\">\r\n                            <input type=\"file\" accept=\"image/*\" ref={imgref} onChange={(value) => {\r\n                                let file_size = parseInt(((value!.target.files![0].size / 1024) / 1024).toString());\r\n                                if (file_size < 4) {\r\n                                    setImgerror(null);\r\n                                    setImg(value!.target.files![0]);\r\n                                } else {\r\n                                    setImgerror(\"Image file size must be less then 4 mb\");\r\n                                }\r\n                            }} />\r\n                        </div>\r\n                        <div className=\"bg-gray-200 rounded-lg my-6 mr-6 p-4 text-gray-400 flex md:flex-col flex-row w-full md:w-56\">\r\n                            <div className=\"grow sm:w-full\">\r\n                                {img == null ? <img src=\"/images/icons/gallery.png\" alt=\"error\" className=\"w-40 sm:w-full object-cover inline-block\" /> : <img src={URL.createObjectURL(img)} alt=\"error\" className=\"w-40 sm:w-full inline-block object-cover rounded-md\" />}\r\n                            </div>\r\n                            <div className=\"w-52 sm:w-full\">\r\n                                <p className=\"mt-4\">\r\n                                    Drop profile photo here.\r\n                                </p>\r\n                                <p className=\"mt-4\">\r\n                                    The image should either be jpg\r\n                                    jped or png format and be a maximum size of 5 MB\r\n                                </p>\r\n                                {(imgerror == \"\" || imgerror == null || imgerror == undefined) ? null :\r\n                                    <div className=\"bg-red-500 bg-opacity-10 border-2 text-center border-red-500 rounded-md text-red-500 text-md font-normal text-md my-4\">{imgerror}</div>\r\n                                }\r\n                                <div onClick={() => { imgref.current?.click(); }}>\r\n                                    <CusButton text=\"Upload\" textColor={\"text-white\"} width={'w-full'} background={\"bg-gray-400\"}></CusButton>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"w-full\">\r\n                        <p className=\"text-black text-left font-normal text-lg mt-4\">Email</p>\r\n                        <input ref={emailRef} disabled={true} type={\"text\"} className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\" />\r\n                        <p className=\"text-black text-left font-normal text-lg  mt-4\">Username</p>\r\n                        <input ref={usernameRef} type={\"text\"} className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\" />\r\n                        <p className=\"text-black text-left font-normal text-lg  mt-4\">Nickname</p>\r\n                        <input ref={nicknameRef} type={\"text\"} className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\" />\r\n                        <p className=\"text-black text-left font-normal text-lg  mt-4\">Date of birth</p>\r\n                        <input type={\"date\"} ref={datepicker} className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\" />\r\n                        <p className=\"text-black text-left font-normal text-lg  mt-4\">Bio</p>\r\n                        <textarea ref={bioRef} className=\"p-4 w-full h-40 outline-none border-2 bg-[#EEEEEE] focus:border-gray-300 rounded-md resize-none\"  ></textarea>\r\n                        {(error == \"\" || error == null || error == undefined) ? null :\r\n                            <div className=\"bg-red-500 bg-opacity-10 border-2 text-center border-red-500 rounded-md text-red-500 text-md font-normal text-md my-4\">{error}</div>\r\n                        }\r\n                        <div onClick={async () => {\r\n\r\n                            if (img == null) {\r\n                                setError(\"Please select the image\")\r\n                            }\r\n                            else if (emailRef.current?.value == null || emailRef.current?.value == undefined || emailRef.current?.value == \"\") {\r\n                                setError(\"Enter the email\");\r\n                            }\r\n                            else if (usernameRef.current?.value == null || usernameRef.current?.value == undefined || usernameRef.current?.value == \"\") {\r\n                                setError(\"Enter the username\");\r\n                            }\r\n                            else if (nicknameRef.current?.value == null || nicknameRef.current?.value == undefined || nicknameRef.current?.value == \"\") {\r\n                                setError(\"Enter the nickname\");\r\n                            }\r\n                            else if (datepicker.current?.value == null || datepicker.current?.value == undefined || datepicker.current?.value == \"\") {\r\n                                setError(\"Enter the date of birth\");\r\n                            }\r\n                            else if (bioRef.current?.value == null || bioRef.current?.value == undefined || bioRef.current?.value == \"\") {\r\n                                setError(\"Enter the bio\");\r\n                            }\r\n                            else {\r\n                                let avatar: String = await UploadFile(img);\r\n                                let req = {\r\n                                    \"id\": userID,\r\n                                    \"userName\": usernameRef.current?.value,\r\n                                    \"userKnownAs\": nicknameRef.current?.value,\r\n                                    \"userBioInfo\": bioRef.current?.value,\r\n                                    \"userDOB\": datepicker.current?.value,\r\n                                    \"userPicUrl\": avatar\r\n                                };\r\n                                const data = await axios({\r\n                                    method: 'post',\r\n                                    url: `${BaseUrl}/api/updateuser`,\r\n                                    data: req,\r\n                                    headers: {\r\n                                        'Access-Control-Allow-Origin': '*',\r\n                                        'Access-Control-Allow-Headers': '*',\r\n                                        'Access-Control-Allow-Options': '*',\r\n                                        'Access-Control-Allow-Methods': '*',\r\n                                        'X-Content-Type-Options': '*',\r\n                                        'Content-Type': 'application/json',\r\n                                        'Accept': '*'\r\n                                    }\r\n                                });\r\n                                if (data.data.status == false) {\r\n                                    return setError(data.data.message);\r\n                                }\r\n                                setIndex(2);\r\n                                nextButton.current!.click();\r\n                            }\r\n\r\n                        }}>\r\n                            <CusButton text=\"Next\" textColor={\"text-white\"} width={'w-full'} background={\"bg-primary\"} fontwidth={\"font-bold\"}></CusButton>\r\n                        </div>\r\n                        <Form method=\"post\" className=\"hidden\">\r\n                            <input type=\"hidden\" name=\"id\" value={userID.toString()} />\r\n                            <button ref={nextButton} name=\"submit\">Submit</button>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default UserInputBoxOne;\r\n\r\n\r\nexport const action: ActionFunction = async ({ request }: ActionArgs) => {\r\n    const formData = await request.formData();\r\n    const value = Object.fromEntries(formData);\r\n\r\n    const userdata = await axios({\r\n        method: 'post',\r\n        url: `${BaseUrl}/api/getuser`,\r\n        data: { \"id\": value.id },\r\n        headers: {\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Access-Control-Allow-Headers': '*',\r\n            'Access-Control-Allow-Options': '*',\r\n            'Access-Control-Allow-Methods': '*',\r\n            'X-Content-Type-Options': '*',\r\n            'Content-Type': 'application/json',\r\n            'Accept': '*'\r\n        }\r\n    });\r\n    if (userdata.data.status == false) {\r\n        return { message: userdata.data.message };\r\n    } else {\r\n        return redirect(\"/home/profilecomplete/secondpage\", {\r\n            headers: {\r\n                \"Set-Cookie\": await userPrefs.serialize({ user: userdata.data.data[0], isLogin: true }),\r\n            },\r\n        });\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["import_react"]
}
