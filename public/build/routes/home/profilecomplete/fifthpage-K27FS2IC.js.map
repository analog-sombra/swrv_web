{
  "version": 3,
  "sources": ["../../../../../app/routes/home/profilecomplete/fifthpage.tsx"],
  "sourcesContent": ["import { ActionArgs, ActionFunction, LoaderArgs, LoaderFunction, json, redirect } from \"@remix-run/node\";\r\nimport { Form, Link, useLoaderData, useNavigate } from \"@remix-run/react\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { CusButton } from \"~/components/utils/buttont\";\r\nimport { BaseUrl, instaUrl } from \"~/const\";\r\nimport { userPrefs } from \"~/cookies\";\r\nimport UserInputStore from \"~/state/user/firstinput\";\r\nimport * as EmailValidator from 'email-validator';\r\n\r\n\r\nexport const loader: LoaderFunction = async (props: LoaderArgs) => {\r\n\r\n    const cookieHeader = props.request.headers.get(\"Cookie\");\r\n    const cookie = await userPrefs.parse(cookieHeader);\r\n\r\n    return json({ user: cookie.user });\r\n}\r\n\r\nconst ThirdPage = () => {\r\n    const userdata = useLoaderData();\r\n    const userId: string = userdata.user.id\r\n    const brandId: string = userdata.user.brand.id;\r\n\r\n    const [error, setError] = useState<String | null>(null);\r\n    const [sus, setSus] = useState<String | null>(null);\r\n\r\n    const setIndex = UserInputStore((state) => state.setIndex);\r\n\r\n\r\n    const nextButton = useRef<HTMLButtonElement>(null);\r\n    const nameRef = useRef<HTMLInputElement>(null);\r\n    const emailRef = useRef<HTMLInputElement>(null);\r\n\r\n    const [contactnumber, setContactnumber] = useState<number>()\r\n    const handelcontent = (e: any) => {\r\n        setContactnumber(e.target.value.replace(/\\D/g, ''));\r\n    }\r\n\r\n    type InvitedUser = {\r\n        name: string\r\n        email: string\r\n        number: string\r\n    }\r\n    const [invitedUser, setInvitedUser] = useState<InvitedUser[]>([]);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"p-8 w-full\">\r\n                <h1 className=\"text-2xl text-black font-bold\">Invite users</h1>\r\n                <div className=\"flex w-full\">\r\n                    <div className=\"w-full\">\r\n                        <div>\r\n                            <p className=\"text-black text-left font-normal text-lg  mt-4\">Username</p>\r\n                            <input ref={nameRef} type={\"text\"} className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\" />\r\n                            <p className=\"text-black text-left font-normal text-lg  mt-4\">Email</p>\r\n                            <input ref={emailRef} type={\"text\"} className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\" />\r\n                            <p className=\"text-black text-left font-normal text-lg  mt-4\">contact number</p>\r\n                            <input onChange={handelcontent} value={contactnumber} type={\"text\"} maxLength={10} className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\" />\r\n                        </div>\r\n                        <div className=\"flex my-4\">\r\n                            <div className=\"grow\"></div>\r\n                            <button onClick={async () => {\r\n\r\n                                if (nameRef.current?.value == null || nameRef.current?.value == undefined || nameRef.current?.value == \"\") {\r\n                                    setError(\"Enter the user \");\r\n                                }\r\n                                else if (emailRef.current?.value == null || emailRef.current?.value == undefined || emailRef.current?.value == \"\") {\r\n                                    setError(\"Fill the Brand info\");\r\n                                }\r\n                                else if (!EmailValidator.validate(emailRef.current?.value)) {\r\n                                    setError(\"Enter valid email\");\r\n\r\n                                }\r\n                                else if (contactnumber == null || contactnumber == undefined || contactnumber == 0) {\r\n                                    setError(\"Fill the contact number\");\r\n                                }\r\n                                else if (contactnumber.toString().length != 10) {\r\n                                    setError(\"Enter a 10 degit valid contact number\");\r\n                                } else {\r\n\r\n\r\n                                    let req = {\r\n                                        \"userId\": userId,\r\n                                        \"brandId\": brandId,\r\n                                        \"name\": nameRef.current?.value,\r\n                                        \"email\": emailRef.current?.value,\r\n                                        \"contact\": contactnumber\r\n                                    };\r\n\r\n                                    const data = await axios({\r\n                                        method: 'post',\r\n                                        url: `${BaseUrl}/api/send-brand-invite`,\r\n                                        data: req,\r\n                                    });\r\n                                    if (data.data.status == false) {\r\n                                        return setError(data.data.message);\r\n                                    }\r\n                                    else {\r\n\r\n                                        let user: InvitedUser = {\r\n                                            name: nameRef.current?.value,\r\n                                            email: emailRef.current?.value,\r\n                                            number: contactnumber.toString()\r\n                                        };\r\n                                        setInvitedUser([...invitedUser, user]);\r\n                                        setError(null);\r\n                                        setContactnumber(0);\r\n                                        nameRef.current!.value = \"\";\r\n                                        emailRef.current!.value = \"\";\r\n                                        return setSus(\"User invited successfully\");\r\n                                    }\r\n                                }\r\n                            }} className=\"text-white rounded-lg bg-secondary py-1 px-4 font-semibold text-lg\">Invite</button>\r\n                        </div>\r\n                        {(error == \"\" || error == null || error == undefined) ? null :\r\n                            <div className=\"bg-red-500 bg-opacity-10 border-2 text-center border-red-500 rounded-md text-red-500 text-md font-normal text-md my-4\">{error}</div>\r\n                        }\r\n                        {(sus == \"\" || sus == null || sus == undefined) ? null :\r\n                            <div className=\"bg-green-500 bg-opacity-10 border-2 text-center border-green-500 rounded-md text-green-500 text-md font-normal text-md my-4\">{sus}</div>\r\n                        }\r\n                        {\r\n                            invitedUser.map((val: InvitedUser, index: number) => {\r\n                                return (\r\n                                    <div key={index} className=\"my-4 bg-gray-200 shadow-md rounded-md py-1 px-4\">\r\n                                        <p className=\"text-slate-900 text-md\">{index + 1}: {val.name} - {val.email} </p>\r\n                                    </div>\r\n                                );\r\n                            })\r\n                        }\r\n                        <div onClick={() => {\r\n                            if (invitedUser.length == 0) {\r\n                                setSus(null);\r\n                                setError(\"Invite at least one user\");\r\n                            } else {\r\n                                setIndex(5);\r\n                                nextButton.current!.click();\r\n                            }\r\n                        }}>\r\n                            <CusButton text=\"Next\" textColor={\"text-white\"} width={'w-full'} background={\"bg-primary\"} fontwidth={\"font-bold\"}></CusButton>\r\n                        </div>\r\n                        <Form method=\"post\" className=\"hidden\">\r\n                            <input type=\"hidden\" name=\"id\" value={userId.toString()} />\r\n                            <button ref={nextButton} name=\"submit\">Submit</button>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default ThirdPage;\r\n\r\n\r\n\r\n\r\nexport const action: ActionFunction = async ({ request }: ActionArgs) => {\r\n    const formData = await request.formData();\r\n    const value = Object.fromEntries(formData);\r\n\r\n    const userdata = await axios({\r\n        method: 'post',\r\n        url: `${BaseUrl}/api/getuser`,\r\n        data: { \"id\": value.id },\r\n        headers: {\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Access-Control-Allow-Headers': '*',\r\n            'Access-Control-Allow-Options': '*',\r\n            'Access-Control-Allow-Methods': '*',\r\n            'X-Content-Type-Options': '*',\r\n            'Content-Type': 'application/json',\r\n            'Accept': '*'\r\n        }\r\n    });\r\n    if (userdata.data.status == false) {\r\n        return { message: userdata.data.message };\r\n    } else {\r\n        return redirect(\"/home\", {\r\n            headers: {\r\n                \"Set-Cookie\": await userPrefs.serialize({ user: userdata.data.data[0], isLogin: true }),\r\n            },\r\n        });\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["import_react"]
}
