{
  "version": 3,
  "sources": ["../../../../app/routes/home/inbox.tsx"],
  "sourcesContent": ["import { useEffect, useId, useRef, useState } from \"react\";\r\nimport * as EmailValidator from 'email-validator';\r\nimport { LoaderArgs, LoaderFunction, json } from \"@remix-run/node\";\r\nimport { userPrefs } from \"~/cookies\";\r\nimport { useLoaderData, useNavigate, useTransition } from \"@remix-run/react\";\r\nimport axios from \"axios\";\r\nimport { BaseUrl } from \"~/const\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nexport const loader: LoaderFunction = async (props: LoaderArgs) => {\r\n    const cookieHeader = props.request.headers.get(\"Cookie\");\r\n    const cookie = await userPrefs.parse(cookieHeader);\r\n    return json({ user: cookie.user });\r\n}\r\n\r\nconst Invite = () => {\r\n    const userdata = useLoaderData();\r\n    const userId: string = userdata.user.id;\r\n\r\n    const [msgIds, setMsgIds] = useState<any[]>([]);\r\n    const [messages, setMessages] = useState<any[]>([]);\r\n\r\n    type UserType = {\r\n        name: string\r\n        avatar: string\r\n        userid: string\r\n        index: string\r\n    }\r\n\r\n    const [user, setUser] = useState<UserType>();\r\n    const init = async () => {\r\n        let req = {\r\n            \"search\": { \"fromToUser\": useId }\r\n        };\r\n        const data = await axios.post(`${BaseUrl}/api/search-chat`, req);\r\n        if (data.data.status == true) {\r\n            for (let i: number = 0; i < data.data.data.length; i++) {\r\n                let fromId: string = data.data.data[i].fromUser.id;\r\n                let toId: string = data.data.data[i].toUser.id;\r\n                if (fromId == userId) {\r\n                    if (!msgIds.includes(toId)) {\r\n                        setMsgIds([...msgIds, toId]);\r\n                        setMessages([...messages, data.data.data[i]]);\r\n                    }\r\n                }\r\n                if (toId == userId) {\r\n                    if (!msgIds.includes(fromId)) {\r\n                        setMsgIds([...msgIds, fromId]);\r\n                        setMessages([...messages, data.data.data[i]]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        init();\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <div className=\"my-4\">\r\n                <div className=\"flex gap-4 flex-col xl:flex-row\">\r\n                    <div className=\"w-full flex lg:flex-row flex-col gap-4\">\r\n                        <div className=\"w-full bg-white rounded-lg shadow-xl lg:w-80 p-2 max-h-screen overflow-y-scroll no-scrollbar min-h-screen\">\r\n                            {/* <div className=\"w-full rounded-md bg-gray-200 py-1 px-2 flex items-center\">\r\n                                <FontAwesomeIcon icon={faSearch}></FontAwesomeIcon>\r\n                                <div className=\"w-4\"></div>\r\n                                <input type=\"text\" placeholder=\"Search\" className=\"outline-none border-none w-full bg-transparent\" />\r\n                            </div> */}\r\n                            {\r\n                                messages.map((val: any, index: number) => {\r\n                                    return (\r\n                                        <div key={index} onClick={() => {\r\n                                            setUser({\r\n                                                name: val.fromUser.id == userId ? val.toUser.name.toString()\r\n                                                    .split(\"@\")[0] : val.fromUser.name.toString()\r\n                                                        .split(\"@\")[0],\r\n                                                avatar: val.fromUser.id == userId ? val.toUser.pic : val.fromUser.pic,\r\n                                                userid: val.fromUser.id == userId ? val.toUser.id : val.fromUser.id,\r\n                                                index: index.toString()\r\n                                            });\r\n                                        }}>\r\n                                            <UserMessage active={user?.index == index.toString() ? true : false} name={val.fromUser.id == userId ? val.toUser.name.toString()\r\n                                                .split(\"@\")[0] : val.fromUser.name.toString()\r\n                                                    .split(\"@\")[0]} message={`${val.fromUser.id == userId ? \"you: \" : \"\"} ${val.comment}`} url={val.fromUser.id == userId ? val.toUser.pic : val.fromUser.pic}></UserMessage>\r\n                                        </div>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </div>\r\n                        {\r\n                            user != undefined ? <ChatBox avatar={user.avatar} id={user.userid} userId={userId} name={user.name} useravatar={userdata.user.pic}></ChatBox> : null\r\n                        }\r\n                    </div>\r\n                    {\r\n                        user != undefined ? <UserCard id={user.userid}></UserCard> : null\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Invite;\r\n\r\n\r\ntype UserMessageProps = {\r\n    url: string\r\n    name: string\r\n    message: string\r\n    active: boolean\r\n}\r\n\r\nconst UserMessage = (props: UserMessageProps) => {\r\n    return (\r\n        <>\r\n            <div className={`flex w-full py-2 my-1 border-b-2 rounded-md ${props.active ? \"bg-gray-200 px-4\" : \"border-slate-200\"}`}>\r\n                <img src={props.url} alt=\"user images\" className=\"w-10 h-10 object-cover rounded-lg shrink-0\" />\r\n                <div className=\"w-2\"></div>\r\n                <div>\r\n                    <p className=\"text-md font-medium  leading-none text-slate-800\">{props.name}</p>\r\n                    <p className=\"text-sm font-normal leading-none text-slate-600\">{props.message}</p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\ntype MessageProps = {\r\n    user: boolean\r\n    message: string\r\n    time: string\r\n    avatar: string\r\n}\r\n\r\nconst Message = (props: MessageProps) => {\r\n    return (\r\n        <>\r\n            <div className=\"w-full flex items-start my-4\">\r\n                <div className={`grow ${props.user ? \"\" : \"hidden\"}`}></div>\r\n                <img src={props.avatar} alt=\"avatar\" className={`w-10 h-10 rounded-md ${props.user ? \"order-3\" : \"\"}`} />\r\n                <div className={`w-4 ${props.user ? \"order-2\" : \"\"}`}></div>\r\n                <div className=\"max-w-4/5 bg-gray-200 rounded-md p-2 order-1\">\r\n                    <p className={`text-xs text-gray-700 font-normal ${props.user ? \"text-right\" : \"text-left\"}`}>\r\n                        {props.time}\r\n                    </p>\r\n                    <p className={`text-md text-gray-900 font-normal text-left ${props.user ? \"text-right\" : \"text-left\"}`}>\r\n                        {props.message}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\ntype UserCardProps = {\r\n    id: string\r\n}\r\n\r\nconst UserCard = (props: UserCardProps) => {\r\n    const [userdata, setUserdata] = useState<any>(null);\r\n    const init = async () => {\r\n        const userdata = await axios({\r\n            method: 'post',\r\n            url: `${BaseUrl}/api/getuser`,\r\n            data: { \"id\": props.id },\r\n        });\r\n        if (userdata.data.status == true) {\r\n            setUserdata(userdata.data.data[0]);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        init();\r\n    }, []);\r\n    const navigator = useNavigate();\r\n    return (\r\n        <>\r\n            {\r\n                userdata == undefined ?\r\n                    <div className=\"bg-white rounded-lg shadow-xl\">\r\n                        <h1 className=\"text-center font-semibold text-rose-500 p-4\">No user found</h1>\r\n                    </div>\r\n                    :\r\n                    <div className=\"bg-white rounded-lg shadow-xl flex w-full xl:w-80 xl:flex-col flex-col sm:flex-row items-start p-4 xl:px-0 xl:pt-0\">\r\n                        <div className=\"w-80 h-80 shrink-0 mx-auto\">\r\n                            <img src={userdata.pic} alt=\"error\" className=\"w-full h-80 object-cover rounded-lg\" />\r\n                        </div>\r\n                        <div className=\"px-4 mt-6 sm:mt-0 grow w-full\">\r\n                            <p className=\"text-left font-semibold text-lg text-slate-800\">{userdata.userName.toString()\r\n                                .split(\"@\")[0]}</p>\r\n                            <p className=\"text-left font-semibold text-sm text-slate-600 mt-4\">Bio</p>\r\n                            <p className=\"text-left font-normal text-sm text-slate-600 mt-4\">{userdata.bio}</p>\r\n\r\n                            <button onClick={() => {\r\n                                navigator(`/home/branduser`);\r\n                            }} className=\" mt-2 w-full py-2 text-center text-primary font-semibold text-lg bg-[#01FFF4] rounded-md\">View profile</button>\r\n                            <div className=\"h-[1px] bg-slate-400 my-4 w-full\"></div>\r\n                            {/* <div className=\"flex\">\r\n                                <p className=\"text-left font-semibold text-sm text-slate-600 mt-4\">Attachments</p>\r\n                                <div className=\"grow\"></div>\r\n                                <button className=\" mt-2 py-2 px-4 text-center text-primary font-semibold text-sm bg-[#01FFF4] rounded-md\">View Campaign</button>\r\n                            </div>\r\n                            <div className=\"flex mt-2\">\r\n                                <div className=\"shrink-0\"><img src=\"/images/inf/inf14.png\" alt=\"user images\" className=\"w-10 h-10 object-cover rounded-lg\" /></div>\r\n                                <div className=\"w-4\"></div>\r\n                                <p className=\"text-sm font-normal leading-none text-slate-600\">Want to awaken your body after a hectic work week? Or, enjoy that after-shower glow by sealing in moisture?</p>\r\n                            </div> */}\r\n                        </div>\r\n                    </div>\r\n            }\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n\r\ntype ChatBoxProps = {\r\n    id: string\r\n    userId: string\r\n    avatar: string\r\n    name: string\r\n    useravatar: string\r\n}\r\n\r\nconst ChatBox = (props: ChatBoxProps) => {\r\n    const chatBoxRef = useRef<HTMLDivElement>(null);\r\n    const chatText = useRef<HTMLInputElement>(null);\r\n    const [message, setMessage] = useState<any[]>([]);\r\n    const [changedata, setChangeData] = useState<boolean>(false);\r\n\r\n    const init = async () => {\r\n        setMessage([]);\r\n        let user1 = {\r\n            \"search\": {\r\n                \"fromUser\": props.id,\r\n                \"toUser\": props.userId,\r\n            }\r\n        };\r\n\r\n        let user2 = {\r\n            \"search\": {\r\n                \"fromUser\": props.userId,\r\n                \"toUser\": props.id,\r\n            }\r\n        };\r\n\r\n        const user1data = await axios({\r\n            method: 'post',\r\n            url: `${BaseUrl}/api/search-chat`,\r\n            data: user1,\r\n        });\r\n\r\n        const user2data = await axios({\r\n            method: 'post',\r\n            url: `${BaseUrl}/api/search-chat`,\r\n            data: user2,\r\n        });\r\n        setMessage(prevState => [...prevState, ...user1data.data.data, ...user2data.data.data]);\r\n        setMessage(prevState => prevState.sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()));\r\n\r\n        // if (user1data.data.status == true) {\r\n        //     setMessage([...message, ...user1data.data.data]);\r\n        // }\r\n        // if (user2data.data.status == true) {\r\n        //     setMessage([...message, ...user2data.data.data]);\r\n        // }\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        chatBoxRef!.current!.scrollTop = chatBoxRef.current?.scrollHeight!;\r\n        init();\r\n    }, [changedata]);\r\n\r\n\r\n\r\n\r\n    const sendMessage = async (msg: string) => {\r\n        let req = {\r\n            \"campaignDraftId\": \"0\",\r\n            \"fromUserId\": props.userId,\r\n            \"toUserId\": props.id,\r\n            \"comment\": msg\r\n        };\r\n\r\n        const data = await axios({\r\n            method: 'post',\r\n            url: `${BaseUrl}/api/add-chat`,\r\n            data: req,\r\n            headers: {\r\n                'Access-Control-Allow-Origin': '*',\r\n                'Access-Control-Allow-Headers': '*',\r\n                'Access-Control-Allow-Options': '*',\r\n                'Access-Control-Allow-Methods': '*',\r\n                'X-Content-Type-Options': '*',\r\n                'Content-Type': 'application/json',\r\n                'Accept': '*'\r\n            }\r\n        });\r\n        setChangeData(!changedata);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"bg-white rounded-lg shadow-xl w-full p-4 max-h-screen flex flex-col\">\r\n                <div className=\"flex items-center\">\r\n                    <img src={props.avatar} className=\"w-10 h-10 rounded-md\" alt=\"avatar\" />\r\n                    <div className=\"w-4\"></div>\r\n                    <p className=\"text-md font-semibold text-slate-900 \">{props.name}</p>\r\n                </div>\r\n                <div className=\"w-full h-[2px] my-2 bg-slate-300\"></div>\r\n                <div ref={chatBoxRef} className=\"w-full h-full overflow-y-scroll grow no-scrollbar\">\r\n                    {\r\n                        message.reverse().map((val: any, index: number) => {\r\n                            return (\r\n                                <div key={index}>\r\n                                    <Message avatar={val.fromUser.id == props.userId ? props.useravatar : props.avatar} message={val.comment} time={val.updatedAt} user={val.fromUser.id == props.userId}></Message>\r\n                                </div>\r\n                            );\r\n                        })\r\n                    }\r\n                </div>\r\n                <div className=\"w-full px-4 py-2\">\r\n                    <div className=\" bg-gray-200 rounded-md px-2 py-2 flex\">\r\n                        <input ref={chatText} type=\"text\" className=\"py-1 w-full px-2 bg-transparent outline-none\" placeholder=\"type something\" />\r\n                        <div className=\"w-4\"></div>\r\n                        <button className=\"bg-primary rounded-md text-white  text-md py-1 px-4 font-semibold\" onClick={async () => {\r\n                            if (chatText.current?.value == null || chatText.current?.value == undefined || chatText.current?.value == \"\") {\r\n                            } else {\r\n                                await sendMessage(chatText.current?.value);\r\n                                chatText!.current!.value = \"\";\r\n                            }\r\n                        }}>SEND</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}"],
  "mappings": "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",
  "names": ["userdata"]
}
