{
  "version": 3,
  "sources": ["../../../../app/routes/home/invite.tsx"],
  "sourcesContent": ["import { useEffect, useRef, useState } from \"react\";\r\nimport { CusButton } from \"~/components/utils/buttont\";\r\nimport * as EmailValidator from 'email-validator';\r\nimport { LoaderArgs, LoaderFunction, json } from \"@remix-run/node\";\r\nimport { userPrefs } from \"~/cookies\";\r\nimport { useLoaderData, useTransition } from \"@remix-run/react\";\r\nimport axios from \"axios\";\r\nimport { BaseUrl } from \"~/const\";\r\nexport const loader: LoaderFunction = async (props: LoaderArgs) => {\r\n    const cookieHeader = props.request.headers.get(\"Cookie\");\r\n    const cookie = await userPrefs.parse(cookieHeader);\r\n    return json({ user: cookie.user });\r\n}\r\n\r\nconst Invite = () => {\r\n    const navigation = useTransition();\r\n    const isSubmitting = navigation.state === \"submitting\";\r\n\r\n    const userdata = useLoaderData();\r\n    const userId: string = userdata.user.id;\r\n    const nameRef = useRef<HTMLInputElement | null>(null);\r\n    const emailRef = useRef<HTMLInputElement | null>(null);\r\n    const [contactnumber, setContactnumber] = useState<number>()\r\n    const [error, setError] = useState<String>(\"\");\r\n\r\n    const [refstatus, setRefStatus] = useState<any[]>([]);\r\n    const [sus, setSus] = useState<String>(\"\");\r\n    const handelcontent = (e: any) => {\r\n        setContactnumber(e.target.value.replace(/\\D/g, ''));\r\n    }\r\n    const init = async () => {\r\n        const data = await axios({\r\n            method: 'get',\r\n            url: `${BaseUrl}/api/user-referrals/${userId}`,\r\n            headers: {\r\n                'Access-Control-Allow-Origin': '*',\r\n                'Access-Control-Allow-Headers': '*',\r\n                'Access-Control-Allow-Options': '*',\r\n                'Access-Control-Allow-Methods': '*',\r\n                'X-Content-Type-Options': '*',\r\n                'Content-Type': 'application/json',\r\n                'Accept': '*'\r\n            }\r\n        });\r\n        setRefStatus(data.data.data[0].refferrals);\r\n    };\r\n\r\n\r\n    useEffect(() => { init(); }, [])\r\n    return (\r\n        <>\r\n            <div></div>\r\n            <div>\r\n                <div className=\"grid place-items-center w-full bg-yellow-500 rounded-xl shadow-xl my-6\">\r\n                    <img src=\"/images/cashgirl.png\" alt=\"error\" className=\"h-72\" />\r\n                </div>\r\n                <div className=\"flex gap-4 grow flex-col lg:flex-row\">\r\n                    <div className=\"bg-white rounded-lg shadow-xl p-4 lg:w-96\">\r\n                        <h1 className=\"text-black text-xl font-bold text-left\">Refer an influencer or brand</h1>\r\n                        <p className=\"text-black text-left font-normal text-md\">Name</p>\r\n                        <input ref={nameRef} type={\"text\"} className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\" />\r\n                        <p className=\"text-black text-left font-normal text-md mt-4\">Email</p>\r\n                        <input ref={emailRef} type={\"text\"} className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\" />\r\n                        <p className=\"text-black text-left font-normal text-md mt-4\">Contact Number</p>\r\n                        <input onChange={handelcontent} value={contactnumber} type={\"text\"} maxLength={10} className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md w-full p-2\" />\r\n                        {(error == \"\" || error == null || error == undefined) ? null :\r\n                            <div className=\"bg-red-500 bg-opacity-10 border-2 text-center border-red-500 rounded-md text-red-500 text-md font-normal text-md my-4\">{error}</div>\r\n                        }\r\n                        {(sus == \"\" || sus == null || sus == undefined) ? null :\r\n                            <div className=\"bg-green-500 bg-opacity-10 border-2 text-center border-green-500 rounded-md text-green-500 text-md font-normal text-md my-4\">{sus}</div>\r\n                        }\r\n                        <div className=\" my-2\" onClick={async () => {\r\n                            if (nameRef.current?.value == null || nameRef.current?.value == undefined || nameRef.current?.value == \"\") {\r\n                                setError(\"Fill user name\");\r\n                            }\r\n                            else if (emailRef.current?.value == null || emailRef.current?.value == undefined || emailRef.current?.value == \"\") {\r\n                                setError(\"Fill the Brand info\");\r\n                            }\r\n                            else if (!EmailValidator.validate(emailRef.current?.value)) {\r\n                                setError(\"Enter valid email\");\r\n                            }\r\n                            else if (contactnumber == null || contactnumber == undefined || contactnumber == 0) {\r\n                                setError(\"Fill the contact number\");\r\n                            }\r\n                            else if (contactnumber.toString().length != 10) {\r\n                                setError(\"Enter a 10 degit valid contact number\");\r\n                            } else {\r\n                                let req = {\r\n                                    \"userId\": userId,\r\n                                    \"name\": nameRef.current?.value,\r\n                                    \"email\": emailRef.current?.value,\r\n                                    \"contact\": contactnumber\r\n                                };\r\n                                const data = await axios({\r\n                                    method: 'post',\r\n                                    url: `${BaseUrl}/api/send-referral`,\r\n                                    data: req,\r\n                                    headers: {\r\n                                        'Access-Control-Allow-Origin': '*',\r\n                                        'Access-Control-Allow-Headers': '*',\r\n                                        'Access-Control-Allow-Options': '*',\r\n                                        'Access-Control-Allow-Methods': '*',\r\n                                        'X-Content-Type-Options': '*',\r\n                                        'Content-Type': 'application/json',\r\n                                        'Accept': '*'\r\n                                    }\r\n                                });\r\n                                if (data.data.status == false) {\r\n                                    return setError(data.data.message);\r\n                                } else {\r\n                                    setError(\"\");\r\n                                    nameRef.current.value = \"\";\r\n                                    emailRef.current.value = \"\";\r\n                                    setContactnumber(undefined);\r\n                                    setSus(\"Invitation has been send.\");\r\n                                }\r\n                            }\r\n                        }}>\r\n                            <button className=\"w-full text-center text-xl rounded-md my-2 py-1 text-primary font-bold bg-[#01FFF4]\">Invite </button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bg-white rounded-lg shadow-xl p-4 grow w-full overflow-x-auto\">\r\n                        <h1 className=\"text-black text-xl font-bold text-left\">Referral status</h1>\r\n                        {refstatus.length == 0 ?\r\n                            <>\r\n                                <h1 className=\"text-black text-md font-semibold text-center\">Your referral list is empty </h1>\r\n                            </>\r\n                            :\r\n                            <table className=\"md:w-full md:table-auto border-separate border-spacing-y-3 w-[700px]\">\r\n                                <thead className=\"w-full bg-gray-100 rounded-xl p-2\">\r\n                                    <tr>\r\n                                        <th scope=\"col\" className=\"mt-2 font-normal p-2 text-left w-20\"></th>\r\n                                        <th scope=\"col\" className=\"mt-2 font-normal p-2 text-left w-40\">Name</th>\r\n                                        <th scope=\"col\" className=\"mt-2 font-normal p-2 text-left\">Email</th>\r\n                                        <th scope=\"col\" className=\"mt-2 font-normal p-2 text-left\">Contact</th>\r\n                                        <th scope=\"col\" className=\"mt-2 font-normal p-2 text-left\">Status</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody className=\"gap-y-4\">\r\n                                    {refstatus.map((val: any, index: number) => {\r\n                                        const avatar = val[\"pic\"] == \"0\" || val[\"pic\"] == null || val[\"pic\"] == undefined || val[\"pic\"] == \"\" ? \"/images/avatar/user.png\" : val[\"pic\"];\r\n                                        return (\r\n                                            <tr key={index}>\r\n                                                <td><img src={avatar} alt=\"error\" className=\"w-12 h-12 rounded-md object-cover\" /></td>\r\n                                                <td>{val.userName}</td>\r\n                                                <td>{val.email}</td>\r\n                                                <td>{val.contact}</td>\r\n                                                <td className=\"font-medium\">{val.status.isVerified}</td>\r\n                                            </tr>\r\n                                        );\r\n                                    })}\r\n                                </tbody>\r\n                            </table>}\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Invite;"],
  "mappings": "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",
  "names": []
}
