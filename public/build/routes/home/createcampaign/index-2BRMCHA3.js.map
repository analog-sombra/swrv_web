{
  "version": 3,
  "sources": ["../../../../../app/routes/home/createcampaign/index.tsx"],
  "sourcesContent": ["import { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { json } from \"@remix-run/node\";\r\nimport { useLoaderData, useNavigate } from \"@remix-run/react\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { CusButton } from \"~/components/utils/buttont\";\r\nimport { BaseUrl } from \"~/const\";\r\nimport CreateCampaignStore from \"~/state/campaign/createcampaign\";\r\n\r\nexport const loader = async () => {\r\n    const data = await axios.post(`${BaseUrl}/api/get-campaign-type`);\r\n    return json({ data: data.data.data });\r\n}\r\n\r\nconst Step1 = () => {\r\n    const navigate = useNavigate();\r\n    const [error, setError] = useState<boolean>(false);\r\n    const data = useLoaderData();\r\n    const catdata = data.data;\r\n    const campaginType = CreateCampaignStore((state) => state.campaignTypeId);\r\n    const setCampaginType = CreateCampaignStore((state) => state.setCampaignTypeId);\r\n    const [camptype, setCamptype] = useState<string>(\"0\");\r\n\r\n    const platform = CreateCampaignStore((state) => state.platform);\r\n    const setPlatform = CreateCampaignStore((state) => state.setPlatform);\r\n\r\n    const nextpage = () => {\r\n        if (camptype === \"0\") {\r\n            setError(true);\r\n        } else {\r\n            setCampaginType(camptype);\r\n            return navigate(\"/home/createcampaign/step2\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCamptype(campaginType);\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"bg-white shadow-xl rounded-xl px-8 py-4 mt-4\">\r\n                {\r\n                    error\r\n                        ?\r\n                        <div className=\"bg-red-500 bg-opacity-10 p-2 border-red-500 border rounded-xl flex items-center\">\r\n                            <div className=\"pr-4\"><FontAwesomeIcon className=\"text-red-500\" icon={faInfoCircle}></FontAwesomeIcon></div>\r\n                            <h1 className=\"text-red-500 text-lg font-normal text-center\">Please select at least one category.</h1>\r\n                        </div>\r\n                        :\r\n                        null\r\n                }\r\n                <div className=\"flex items-center\">\r\n                    <h1 className=\"text-black font-normal text-lg text-center\">Select one below</h1>\r\n                    <div className=\"grow\"></div>\r\n                    <div onClick={() => nextpage()}> <CusButton text=\"Next\" textColor={\"text-white\"} background={\"bg-primary\"} fontwidth={\"font-bold\"}></CusButton></div>\r\n                </div>\r\n                <div className=\"grid place-items-center grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 items-start gap-4\">\r\n                    {catdata.map((val: unknown, i: number) => {\r\n                        return (\r\n                            <div key={i} className={`shadow-xl rounded-xl w-72 bg-white my-4 ${camptype == catdata[i][\"id\"] ? \"border-2 border-gray-400\" : \"\"} h-[350px]`} onClick={() => setCamptype(catdata[i][\"id\"])}>\r\n                                <img src={catdata[i][\"categoryPicUrl\"]} alt=\"error\" className=\"rounded-t-xl w-full h-40\" />\r\n                                <div className=\"p-6\">\r\n                                    <h1 className=\"text-black text-left font-medium text-lg\">{catdata[i][\"categoryName\"]}</h1>\r\n                                    <p className=\"text-sm text-gray-400 font-normal text-left\">{catdata[i][\"categoryDescription\"]}</p>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default Step1;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAAA,gBAAoC;AAoC5B;AA1BR,IAAM,QAAQ,MAAM;AAChB,QAAM,WAAW,YAAY;AAC7B,QAAM,CAAC,OAAO,QAAQ,QAAI,wBAAkB,KAAK;AACjD,QAAM,OAAO,cAAc;AAC3B,QAAM,UAAU,KAAK;AACrB,QAAM,eAAe,uBAAoB,CAAC,UAAU,MAAM,cAAc;AACxE,QAAM,kBAAkB,uBAAoB,CAAC,UAAU,MAAM,iBAAiB;AAC9E,QAAM,CAAC,UAAU,WAAW,QAAI,wBAAiB,GAAG;AAEpD,QAAM,WAAW,uBAAoB,CAAC,UAAU,MAAM,QAAQ;AAC9D,QAAM,cAAc,uBAAoB,CAAC,UAAU,MAAM,WAAW;AAEpE,QAAM,WAAW,MAAM;AACnB,QAAI,aAAa,KAAK;AAClB,eAAS,IAAI;AAAA,IACjB,OAAO;AACH,sBAAgB,QAAQ;AACxB,aAAO,SAAS,4BAA4B;AAAA,IAChD;AAAA,EACJ;AAEA,+BAAU,MAAM;AACZ,gBAAY,YAAY;AAAA,EAC5B,GAAG,CAAC,CAAC;AAEL,SACI,sFACI,6DAAC,SAAI,WAAU,gDAEP;AAAA,YAEI,mDAAC,SAAI,WAAU,mFACX;AAAA,yDAAC,SAAI,WAAU,QAAO,6DAAC,mBAAgB,WAAU,gBAAe,MAAM,gBAAhD;AAAA;AAAA;AAAA;AAAA,aAA8D,KAApF;AAAA;AAAA;AAAA;AAAA,aAAsG;AAAA,MACtG,mDAAC,QAAG,WAAU,gDAA+C,oDAA7D;AAAA;AAAA;AAAA;AAAA,aAAiG;AAAA,SAFrG;AAAA;AAAA;AAAA;AAAA,WAGA,IAEA;AAAA,IAER,mDAAC,SAAI,WAAU,qBACX;AAAA,yDAAC,QAAG,WAAU,8CAA6C,gCAA3D;AAAA;AAAA;AAAA;AAAA,aAA2E;AAAA,MAC3E,mDAAC,SAAI,WAAU,UAAf;AAAA;AAAA;AAAA;AAAA,aAAsB;AAAA,MACtB,mDAAC,SAAI,SAAS,MAAM,SAAS,GAAG;AAAA;AAAA,QAAC,mDAAC,aAAU,MAAK,QAAO,WAAW,cAAc,YAAY,cAAc,WAAW,eAArF;AAAA;AAAA;AAAA;AAAA,eAAkG;AAAA,WAAnI;AAAA;AAAA;AAAA;AAAA,aAA+I;AAAA,SAHnJ;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,IACA,mDAAC,SAAI,WAAU,uFACV,kBAAQ,IAAI,CAAC,KAAc,MAAc;AACtC,aACI,mDAAC,SAAY,WAAW,2CAA2C,YAAY,QAAQ,GAAG,QAAQ,6BAA6B,gBAAgB,SAAS,MAAM,YAAY,QAAQ,GAAG,KAAK,GACtL;AAAA,2DAAC,SAAI,KAAK,QAAQ,GAAG,mBAAmB,KAAI,SAAQ,WAAU,8BAA9D;AAAA;AAAA;AAAA;AAAA,eAAyF;AAAA,QACzF,mDAAC,SAAI,WAAU,OACX;AAAA,6DAAC,QAAG,WAAU,4CAA4C,kBAAQ,GAAG,mBAArE;AAAA;AAAA;AAAA;AAAA,iBAAqF;AAAA,UACrF,mDAAC,OAAE,WAAU,+CAA+C,kBAAQ,GAAG,0BAAvE;AAAA;AAAA;AAAA;AAAA,iBAA8F;AAAA,aAFlG;AAAA;AAAA;AAAA;AAAA,eAGA;AAAA,WALM,GAAV;AAAA;AAAA;AAAA;AAAA,aAMA;AAAA,IAER,CAAC,KAXL;AAAA;AAAA;AAAA;AAAA,WAYA;AAAA,OA5BJ;AAAA;AAAA;AAAA;AAAA,SA6BA,KA9BJ;AAAA;AAAA;AAAA;AAAA,SA+BA;AAER;AACA,IAAOC,0BAAQ;",
  "names": ["import_react", "createcampaign_default"]
}
