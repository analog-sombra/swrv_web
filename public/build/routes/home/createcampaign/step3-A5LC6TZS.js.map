{
  "version": 3,
  "sources": ["../../../../../app/routes/home/createcampaign/step3.tsx"],
  "sourcesContent": ["import { faAdd, faCaretDown, faCircleXmark } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { json } from \"@remix-run/node\";\r\nimport { useLoaderData, useNavigate } from \"@remix-run/react\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { CusButton } from \"~/components/utils/buttont\";\r\nimport { BaseUrl } from \"~/const\";\r\nimport CreateCampaignStore from \"~/state/campaign/createcampaign\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nexport const loader = async () => {\r\n    const data = await axios.post(`${BaseUrl}/api/getcategory`);\r\n    return json({ data: data.data.data });\r\n}\r\n\r\n\r\nconst Step3 = () => {\r\n    // const [revenue, setRevenue] = useState(\"cash\");\r\n    const navigator = useNavigate();\r\n    const data = useLoaderData();\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n\r\n    const audienceText = useRef<HTMLInputElement>(null);\r\n    const [auderror, setAudError] = useState<string | null>(null);\r\n    const [addaudience, setAddAudience] = useState<boolean>(false);\r\n    const audience = CreateCampaignStore((state) => state.audience);\r\n    const removeAudience = CreateCampaignStore((state) => state.removeAudience);\r\n    const clearAudience = CreateCampaignStore((state) => state.clearAudience);\r\n    const addAudience = CreateCampaignStore((state) => state.addAudience);\r\n\r\n\r\n    const infLocation = CreateCampaignStore((state) => state.infLocation);\r\n    const setInfLocation = CreateCampaignStore((state) => state.setInfLocation);\r\n\r\n\r\n    const datepicker = useRef<HTMLInputElement | null>(null);\r\n    const tilldate = CreateCampaignStore((state) => state.tilldate);\r\n    const setTillDate = CreateCampaignStore((state) => state.setTillDate);\r\n\r\n    const maxInf = useRef<HTMLInputElement | null>(null);\r\n    const maxinf = CreateCampaignStore((state) => state.maxInf);\r\n    const setMaxInf = CreateCampaignStore((state) => state.setMaxInf);\r\n\r\n    const remuneration = useRef<HTMLInputElement | null>(null);\r\n    const Remuneration = CreateCampaignStore((state) => state.remuneration);\r\n    const setRemuneration = CreateCampaignStore((state) => state.setRemuneration);\r\n\r\n    const remunerationType = CreateCampaignStore((state) => state.remunerationType);\r\n    const setRemunerationType = CreateCampaignStore((state) => state.setRemunerationType);\r\n\r\n    useEffect(() => {\r\n        if (datepicker.current?.value != null) {\r\n            datepicker!.current!.value = tilldate;\r\n        }\r\n        if (maxInf.current?.value != null) {\r\n            maxInf!.current!.value = maxinf.toString();\r\n        }\r\n        if (remuneration.current?.value != null) {\r\n            remuneration!.current!.value = Remuneration;\r\n        }\r\n    }, []);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"bg-white shadow-xl rounded-xl px-8 py-4 mt-4\">\r\n                <h2 className=\"text-black tect-xl font-medium text-left\">Audience & demeography</h2>\r\n                {/* audience start here */}\r\n                <h2 className=\"text-primary tect-xl font-medium text-left my-1\">Audience location</h2>\r\n                <div className=\"flex\">\r\n                    <div className=\"bg-[#EEEEEE]  h-10 rounded-lg  flex gap-1 pl-2 sm:w-96 w-72\">\r\n                        <div className=\"flex gap-x-2 overflow-x-scroll no-scrollbar\">\r\n                            {audience.map((value: string, i: number) => {\r\n                                return (\r\n                                    <div key={i} className=\"flex bg-white my-1 rounded-md py-1 px-2 items-center gap-x-4\">\r\n                                        <div className=\" text-black font-semibold \">\r\n                                            {`@${value}`}\r\n                                        </div>\r\n                                        <div className=\"grid place-items-center cursor-pointer\" onClick={() => removeAudience(value)}>\r\n                                            <FontAwesomeIcon icon={faCircleXmark} className=\"text-lg font-bold text-red-500\"></FontAwesomeIcon>\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                        <div className=\"grow\"></div>\r\n                        <div className=\"grid place-items-center px-4 bg-gray-300 rounded-lg\" onClick={() => setAddAudience(true)}>\r\n                            <FontAwesomeIcon icon={faAdd}></FontAwesomeIcon>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <p className=\"text-primary text-center text-md font-normal my-2 w-20 cursor-pointer\" onClick={clearAudience}>clear all</p>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    addaudience ?\r\n                        <div className=\"mt-4 flex\">\r\n                            <div className=\"grid place-items-center\">\r\n                                <input ref={audienceText} type=\"text\" className=\"bg-gray-200 w-full outline-none rounded-lg px-4 py-2\" placeholder=\"Audience\" />\r\n                            </div>\r\n                            <div className=\"w-6\"></div>\r\n                            <div onClick={() => {\r\n                                if (audienceText!.current!.value == \"\" || audienceText!.current!.value == null || audienceText!.current!.value == undefined) {\r\n                                    setAudError(\"Mendtion can't be empty!\")\r\n                                } else if (audience.includes(audienceText!.current!.value)) {\r\n                                    setAudError(\"Mendtion already exist add a diffrent one\");\r\n                                } else if (audienceText!.current!.value.indexOf(\" \") >= 0) {\r\n\r\n                                    setAudError(\"Mendtion cannot containt space\");\r\n                                }\r\n                                else {\r\n                                    addAudience(audienceText!.current!.value);\r\n                                    audienceText!.current!.value = \"\";\r\n                                    setAddAudience(false);\r\n                                    setAudError(null);\r\n                                }\r\n                            }}>\r\n                                <CusButton text=\"ADD\" background=\"bg-primary\" width={\"w-20\"}></CusButton>\r\n                            </div>\r\n                        </div>\r\n                        : null\r\n                }\r\n                {(auderror == \"\" || auderror == null || auderror == undefined) ? null :\r\n                    <div className=\"bg-red-500 bg-opacity-10 border-2 text-center border-red-500 rounded-xl text-red-500 text-md font-normal text-md\">{auderror}</div>\r\n                }\r\n\r\n                {/* audience end here */}\r\n\r\n\r\n                <h2 className=\"text-primary tect-xl font-medium text-left my-1\">Influencer category</h2>\r\n                <select className=\"w-full p-2 bg-[#EEEEEE] rounded-lg outline-none border-none pr-6\" onClick={(value: any) => {\r\n                    const data = value.target.value + \"\";\r\n                    const setdata = data.split(\" \");\r\n                    setInfLocation(setdata[0], setdata[1], setdata[2]);\r\n                }} >\r\n                    {data.data.map((value: any, i: number) => {\r\n                        if (value.id == infLocation.id) {\r\n                            return (\r\n                                <option value={`${value.id} ${value.categoryName} ${value.categoryCode}`} key={i} className=\"border-none outline-none font-normal text-lg\" selected >{`${value.categoryName} [${value.categoryCode}]`}</option>\r\n                            );\r\n                        } else {\r\n                            return (\r\n                                <option value={`${value.id} ${value.categoryName} ${value.categoryCode}`} key={i} className=\"border-none outline-none font-normal text-lg\"  >{`${value.categoryName} [${value.categoryCode}]`}</option>\r\n                            );\r\n                        }\r\n\r\n                    })}\r\n                </select>\r\n                <h2 className=\"text-primary tect-xl font-medium text-left my-1\">Maximum no of influencers that can join the campaign</h2>\r\n                <input ref={maxInf} type={\"number\"} className=\"bg-[#EEEEEE] outline-none border-none rounded-lg focus:border-gray-300 mt-4 w-full p-2\"></input>\r\n                <h2 className=\"text-primary tect-xl font-medium text-left my-1\">Geo restriction ( Optional only applicable for influencer filtering ) radius in kilometers</h2>\r\n                <div className=\"w-full h-96\">\r\n                    <img src={\"https://www.thestatesman.com/wp-content/uploads/2020/04/googl_ED.jpg\"} alt={'error'} className=\"object-cover h-96 w-full rounded-xl\" />\r\n                </div>\r\n                <h2 className=\"text-primary tect-xl font-medium text-left my-1\">Accept participation / invite till</h2>\r\n                <input type={\"date\"} ref={datepicker} className=\"bg-[#EEEEEE] outline-none border-none rounded-lg focus:border-gray-300 mt-4 w-full p-2\"></input>\r\n                <h2 className=\"text-primary tect-xl font-medium text-left my-1\">Remuneration</h2>\r\n                <select className=\"w-full p-2 bg-[#EEEEEE] rounded-lg outline-none border-none pr-6\" onChange={(value) => {\r\n                    setRemunerationType(value.target.value);\r\n                }}>\r\n                    <option value=\"1\" className=\"border-none outline-none font-normal text-lg\">Cash</option>\r\n                    <option value=\"2\" className=\"border-none outline-none font-normal text-lg\">Product</option>\r\n                    <option value=\"3\" className=\"border-none outline-none font-normal text-lg\">Revenue</option>\r\n                    <option value=\"4\" className=\"border-none outline-none font-normal text-lg\">Discount</option>\r\n                </select>\r\n                {\r\n                    (remunerationType == \"1\") ?\r\n                        <input ref={remuneration} type={\"text\"} className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md mt-4 w-full p-2\" placeholder=\"usd\" />\r\n                        : null\r\n                }\r\n                {\r\n                    (remunerationType == \"2\") ?\r\n                        <input ref={remuneration} type={\"text\"} className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md mt-4 w-full p-2\" placeholder=\"Product details\" />\r\n                        : null\r\n                }\r\n                {\r\n                    (remunerationType == \"3\") ?\r\n                        <input ref={remuneration} type={\"text\"} className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md mt-4 w-full p-2\" placeholder=\"% per sale\" />\r\n                        : null\r\n                }\r\n                {\r\n                    (remunerationType == \"4\") ?\r\n                        <input ref={remuneration} type={\"text\"} className=\"bg-[#EEEEEE]  outline-none border-none focus:border-gray-300 rounded-md mt-4 w-full p-2\" placeholder=\"Coupons\" />\r\n                        : null\r\n                }\r\n                {(error == \"\" || error == null || error == undefined) ? null :\r\n                    <div className=\"my-4 bg-red-500 bg-opacity-10 border-2 text-center border-red-500 rounded-xl text-red-500 text-md font-normal text-md\">{error}</div>\r\n                }\r\n                <div className=\"flex w-full\">\r\n                    <div onClick={() => { navigator(-1) }} className=\"w-full\">\r\n                        <CusButton text=\"Back\" textColor={\"text-black\"} background=\"bg-gray-100\" width={\"w-full\"}></CusButton>\r\n                    </div>\r\n                    <div className=\"w-10\"></div>\r\n                    <div className=\"w-full\" onClick={() => {\r\n                        if (audience.length == 0) {\r\n                            setError(\"Add Audience Location\");\r\n                        } else if (infLocation.id == null || infLocation.id == undefined || infLocation.id == \"\") {\r\n                            setError(\"Select Influencer category\");\r\n                        }\r\n                        else if (maxInf.current?.value == null || maxInf.current.value == undefined || maxInf.current?.value == \"\" || parseInt(maxInf.current?.value) == 0) {\r\n                            setError(\"Select maximum influencer no. \");\r\n                        } else if (datepicker.current?.value == null || datepicker.current?.value == undefined || datepicker.current?.value == \"\") {\r\n                            setError(\"Select Accept participation last date. \");\r\n                        } else if (remuneration.current?.value == null || remuneration.current?.value == undefined || remuneration.current?.value == \"\") {\r\n                            setError(\"Select emuneration. \");\r\n                        }\r\n                        else {\r\n                            setTillDate(datepicker.current?.value);\r\n                            setMaxInf(parseInt(maxInf.current?.value));\r\n                            setRemuneration(remuneration.current?.value);\r\n                            navigator(\"/home/createcampaign/step4\");\r\n                        }\r\n                    }}>\r\n                        <CusButton text=\"Next\" textColor={\"text-white\"} background=\"bg-primary\" width={\"w-full\"}></CusButton>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default Step3;"],
  "mappings": "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",
  "names": ["import_react", "data"]
}
