import{d as V}from"/build/_shared/chunk-WLPYV2BQ.js";import{b as S,c as h,d as b}from"/build/_shared/chunk-7UEYUE33.js";var g=S(x=>{"use strict";var v=b(),q=V();function M(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var T=typeof Object.is=="function"?Object.is:M,A=q.useSyncExternalStore,C=v.useRef,z=v.useEffect,I=v.useMemo,N=v.useDebugValue;x.useSyncExternalStoreWithSelector=function(e,t,r,n,o){var c=C(null);if(c.current===null){var a={hasValue:!1,value:null};c.current=a}else a=c.current;c=I(function(){function u(i){if(!p){if(p=!0,s=i,i=n(i),o!==void 0&&a.hasValue){var d=a.value;if(o(d,i))return f=d}return f=i}if(d=f,T(s,i))return d;var E=n(i);return o!==void 0&&o(d,E)?d:(s=i,f=E)}var p=!1,s,f,m=r===void 0?null:r;return[function(){return u(t())},m===null?void 0:function(){return u(m())}]},[t,r,n,o]);var l=A(e,c[0],c[1]);return z(function(){a.hasValue=!0,a.value=l},[l]),N(l),l}});var O=S((_,w)=>{"use strict";w.exports=g()});var y=e=>{let t,r=new Set,n=(u,p)=>{let s=typeof u=="function"?u(t):u;if(!Object.is(s,t)){let f=t;t=p??typeof s!="object"?s:Object.assign({},t,s),r.forEach(m=>m(t,f))}},o=()=>t,l={setState:n,getState:o,subscribe:u=>(r.add(u),()=>r.delete(u)),destroy:()=>{(import.meta.env&&import.meta.env.MODE)!=="production"&&console.warn("[DEPRECATED] The destroy method will be unsupported in the future version. You should use unsubscribe function returned by subscribe. Everything will be garbage collected if store is garbage collected."),r.clear()}};return t=e(n,o,l),l},D=e=>e?y(e):y;var P=h(b(),1),R=h(O(),1),{useSyncExternalStoreWithSelector:W}=R.default;function k(e,t=e.getState,r){let n=W(e.subscribe,e.getState,e.getServerState||e.getState,t,r);return(0,P.useDebugValue)(n),n}var j=e=>{(import.meta.env&&import.meta.env.MODE)!=="production"&&typeof e!="function"&&console.warn('[DEPRECATED] Passing a vanilla store will be unsupported in the future version. Please use `import { useStore } from "zustand"` to use the vanilla store in React.');let t=typeof e=="function"?D(e):e,r=(n,o)=>k(t,n,o);return Object.assign(r,t),r},G=e=>e?j(e):j;export{G as a};
